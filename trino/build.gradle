/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'distribution'
    id 'maven'
}
apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/maven.gradle"

repositories {
    mavenLocal()
    maven {
        url = uri('https://packages.confluent.io/maven/')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/repositories/snapshots')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}

dependencies {
    compile 'io.trino:trino-client:359'
    compile 'io.trino:trino-main:359'
    compile 'io.trino:trino-plugin-toolkit:359'
    compile 'io.trino:trino-record-decoder:359'
    compile 'io.airlift:bootstrap:207'
    compile 'io.airlift:configuration:207'
    compile 'io.airlift:json:207'
    compile 'io.airlift:log:207'
    compile 'io.airlift:units:1.6'
    compile 'com.fasterxml.jackson.core:jackson-core:2.12.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
    compile 'com.github.erosb:everit-json-schema:1.12.1'
    compile 'com.google.guava:guava:30.1.1-jre'
    compile 'com.google.inject:guice:5.0.1'
    compile 'com.google.protobuf:protobuf-java:3.12.0'
    compile 'com.linkedin.calcite:calcite-core:1.21.0.146'
    compile 'io.pravega:pravega-client:0.9.0'
    compile 'io.pravega:pravega-common:0.9.0'
    compile 'io.pravega:pravega-shared-protocol:0.9.0'
    compile 'io.pravega:schemaregistry-client:0.2.0'
    compile 'io.pravega:schemaregistry-common:0.2.0'
    compile 'io.pravega:schemaregistry-contract:0.2.0'
    compile 'io.pravega:schemaregistry-serializers:0.2.0'
    compile 'io.pravega:schemaregistry-serializers-json:0.2.0'
    compile 'io.pravega:schemaregistry-serializers-shared:0.2.0'
    compile 'javax.inject:javax.inject:1'
    compile 'javax.validation:validation-api:2.0.1.Final'
    compile 'org.apache.avro:avro:1.9.2'
    compile 'io.trino:trino-spi:359'
    compile 'io.airlift:slice:0.39'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.12.2'
    compile 'org.openjdk.jol:jol-core:0.2'
    compile 'io.trino:trino-server-dev:359'
    compile 'io.trino:trino-server-main:359'
    runtimeOnly 'io.airlift:log-manager:207'
    runtimeOnly 'com.emc.ecs:object-transform:1.1.0'
    runtimeOnly 'com.emc.ecs:smart-client:2.2.1'
    runtimeOnly 'org.glassfish.jersey.core:jersey-server:2.30'
    runtimeOnly 'org.javassist:javassist:3.25.0-GA'
    runtimeOnly 'org.jetbrains:annotations:19.0.0'
    runtimeOnly 'org.yaml:snakeyaml:1.27'
    testImplementation 'io.trino:trino-memory:359'
    testImplementation 'io.trino:trino-benchmark:359'
    testImplementation 'io.trino:trino-spi:359'
    testImplementation 'io.trino:trino-testing:359'
    testImplementation 'io.trino:trino-testing-services:359'
    testImplementation 'io.trino:trino-tpch:359'
    testImplementation 'io.trino.tpch:tpch:1.1'
    testImplementation 'io.airlift:testing:207'
    testImplementation 'io.pravega:pravega-standalone:0.9.0'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.openjdk.jmh:jmh-core:1.20'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.20'
    testImplementation 'org.testng:testng:6.10'
}

group = 'io.trino'
version = '359'
sourceCompatibility = '11'
targetCompatibility = '11'

task copyDependentJars(type: Copy) {
    from configurations.runtime
    into "$buildDir/plugin/libs/pravega"
}

jar {
    baseName = 'trino-pravega'
    destinationDir = file("$buildDir/plugin/libs/pravega")
    manifest {
        attributes "Main-Class": "io.trino.plugin.pravega"
    }
}

plugins.withType(DistributionPlugin) {
    distTar {
        compression = Compression.GZIP
        extension = 'tar.gz'
    }
}

distributions {
    main {
        contents {
            distributionBaseName = 'pravega-trino-connector'
            from jar
        }
    }
}

def integration = project.hasProperty("integration")

test {
    maxHeapSize = "2048m"
    useTestNG() {
        suites "src/test/unit-test.xml"
        if (integration) {
            suites "src/test/integration-test.xml"
        }
    }
}

jar.dependsOn(copyDependentJars)
